library(shiny)
library(leaflet)
library(sf)
library(data.table)
library(readr)
library(stringr)
library(dplyr)
library(RColorBrewer)
library(rnaturalearth)
library(rnaturalearthdata)
library(DT)
library(vroom)
library(shinyWidgets)
library(lubridate)
library(magrittr)


dt_syria <- fread("~/Documents/Turkey_Syria/turkey_airquality/acled_dt_syr_war.csv")
dt_turkey <- fread("~/Documents/Turkey_Syria/turkey_airquality/turkey_airquality_and_syrian_war.csv")
syria_admin1 <- st_read("~/Documents/Research Projects/Turkey_Syria/turkey_airquality/syr_adm_unocha/syr_admbnda_adm1_uncs_unocha.json")

syria_admin1 <- syria_admin1 %>%
  rename(admin1 = ADM1_EN)

countries <- ne_countries(
  country = c("Turkey", "Syria"),
  returnclass = "sf",
  scale = "medium"
)

dt_turkey <- dt_turkey %>%
  mutate(
    yy = year(date_v1),
    week = isoweek(date_v1)
  )

dt_turkey_weekly <- dt_turkey %>%
  group_by(yy, week, monitor_id) %>%
  summarise(
    monitor         = first(monitor),
    latitude        = first(mon_lat),
    longitude       = first(mon_lon),
    avg_windspeed   = mean(windspeed, na.rm = TRUE),
    avg_temperature = mean(temperature, na.rm = TRUE),
    avg_precip      = mean(precip, na.rm = TRUE),
    avg_humidity    = mean(humidity, na.rm = TRUE),
    avg_pm10        = mean(pm10, na.rm = TRUE),
    avg_no2         = mean(no2, na.rm = TRUE),
    tot_events      = sum(tot_events, na.rm = TRUE),
    dw_events       = sum(dw_events, na.rm = TRUE),
    dw_fatals       = sum(dw_fatals, na.rm = TRUE),
    uw_events       = sum(uw_events, na.rm = TRUE),
    uw_fatals       = sum(uw_fatals, na.rm = TRUE),
    tot_fatals      = sum(tot_fatals, na.rm = TRUE),
    nw_events       = sum(nw_events, na.rm = TRUE),
    nw_fatals       = sum(nw_fatals, na.rm = TRUE),
    .groups = "drop"
  ) %>%
  arrange(monitor_id, yy, week)

sum_syria <- dt_syria
sum_syria[, yy := year(date_v1)]
sum_syria[, .(.N, sum(fatalities)), keyby = c("yy", "admin1", "admin2")]
sum_syria <- sum_syria[, .(latitude = mean(latitude), longitude = mean(longitude), num_events = .N, total_fatalities = sum(fatalities)), by = .(yy, admin1)]

stations <- dt_turkey %>% 
  distinct(monitor_id, monitor, mon_lat, mon_lon)

ui <- fluidPage(
  fluidRow(
    column(width = 3,
           h4("Filters"),
           pickerInput("year", "Select Year", choices = unique(dt_syria$yy), multiple = FALSE),
           selectInput("syria_event", "Event Type:", choices = unique(dt_syria$event_type), multiple = TRUE),
           selectInput("admin1", "Admin 1:", choices = unique(dt_syria$admin1), multiple = TRUE),
    ),
    
    column(width = 9,
           leafletOutput("map", height = "90vh")
    )
  ),
  
  absolutePanel(
    id = "plots", class = "panel", 
    fixed = TRUE, draggable = TRUE,
    bottom = 10, left = 10, width = 600, height = 300,
    fluidRow(
      column(6, plotOutput("scatter_uw", height = "280px")),
      column(6, plotOutput("scatter_dw", height = "280px"))
    )
  )
)


server <- function(input, output, session) {
  
  filtered_data_turkey <- reactive({
    data <- dt_turkey
    
    if(!is.null(input$year) && length(input$year) > 0) {
      data <- data[data$yy %in% input$year]
    }
    
    return(data)
  })
  
  syria_map_data <- reactive({
    req(input$year)
    
    syria_admin1 %>%
      left_join(
        sum_syria %>% filter(yy == input$year),
        by = "admin1"
      )
  })
  
  output$map <- renderLeaflet({
    leaflet() %>%
      addProviderTiles(providers$CartoDB.Positron) %>%
      addPolygons(
        data = countries,
        fill = FALSE, color = "black", weight = 1.2
      )
  })
  
  observe({
    data <- filtered_data_turkey()
    stations_filtered <- distinct(data, monitor_id, monitor, mon_lat, mon_lon)
    
    leafletProxy("map") %>%
      clearMarkers() %>%
      clearShapes() %>%
      clearControls() 
    
    leafletProxy("map") %>%
      addCircleMarkers(
        data = stations_filtered,
        lng = ~mon_lon, lat = ~mon_lat,
        layerId = ~monitor,
        popup = ~paste0("<b>", monitor, "</b><br>Station ID: ", monitor_id),
        radius = 5, fillOpacity = 0.8, color = "darkgreen"
      ) %>%
      fitBounds(
        lng1 = min(stations$mon_lon), lat1 = min(stations$mon_lat),
        lng2 = max(stations$mon_lon), lat2 = max(stations$mon_lat)
      )
    
    syria_data <- syria_map_data()
    
    pal <- colorBin("Reds", domain = syria_data$num_events, bins = 5, na.color = "transparent")
    
    leafletProxy("map") %>%
      addPolygons(
        data = syria_data,
        fillColor = ~pal(num_events),
        fillOpacity = 0.6,
        color = "black", weight = 1,
        popup = ~paste0("<b>", admin1, "</b><br>",
                        "Events: ", num_events, "<br>",
                        "Fatalities: ", total_fatalities)
      ) %>%
      addLegend(
        position = "bottomright",
        pal = pal,
        values = syria_data$num_events,
        title = "Number of Conflicts"
      )
  })
  
  
  clicked_station <- reactiveVal(NULL)
  observeEvent(input$map_marker_click, {
    click <- input$map_marker_click
    clicked_station(click$id)
  })
  
  output$scatter_uw <- renderPlot({
    req(clicked_station())
    df <- filtered_data_turkey() %>%
      filter(monitor == clicked_station()) %>%
      filter(uw_events != 0)
    
    ggplot(df, aes(x = uw_events, y = pm10)) +
      geom_point(color = "darkblue", alpha = 0.6) +
      geom_smooth(method = "lm", color = "red") +
      labs(title = paste("Upwind Events vs PM10 -", clicked_station(), "-", input$year),
           x = "Upwind Events", y = "PM10") +
      theme_minimal()
  })
  
  output$scatter_dw <- renderPlot({
    req(clicked_station())
    df <- filtered_data_turkey() %>%
      filter(monitor == clicked_station()) %>%
      filter(dw_events != 0)
    
    ggplot(df, aes(x = dw_events, y = pm10)) +
      geom_point(color = "darkgreen", alpha = 0.6) +
      geom_smooth(method = "lm", color = "red") +
      labs(title = paste("Downwind Events vs PM10 -", clicked_station(), "-", input$year),
           x = "Downwind Events", y = "PM10") +
      theme_minimal()
  })
}

shinyApp(ui, server)
